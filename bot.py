import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
import openpyxl
import re

API_TOKEN = '7928868644:AAGExX-NjIoSkzv_7MYCAsQ6c9kEkHwIokE'
EXCEL_FILE = 'tires.xlsx'

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –ö–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥
back_button = KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ü–æ–∏—Å–∫ –ø–æ —Ä–∞–∑–º–µ—Ä—É"), KeyboardButton(text="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é")]
    ],
    resize_keyboard=True
)

# –ö–Ω–æ–ø–∫–∏ —Ä–∞–∑–º–µ—Ä–æ–≤
sizes = ["R12", "R13", "R14", "R15", "R16", "R17", "R17.5", "R18", "R19", "R19.5", "R20", "R22.5"]
size_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text=s)] for s in sizes] + [[back_button]],
    resize_keyboard=True
)

def clean_name(name):
    """–£–¥–∞–ª—è–µ—Ç (1), (2) –∏ —Ç.–¥. –∏–∑ –∫–æ–Ω—Ü–∞ –Ω–∞–∑–≤–∞–Ω–∏—è"""
    return re.sub(r'\s*\(\d+\)$', '', str(name))

def get_price(item):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ü–µ–Ω—É (–∞—É–¥–∏—Ç–Ω—É—é, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å –∏ –≤—ã—à–µ —Ä–æ–∑–Ω–∏—á–Ω–æ–π, –∏–Ω–∞—á–µ —Ä–æ–∑–Ω–∏—á–Ω—É—é)"""
    audit_price = item['audit'] if item['audit'] is not None else 0
    retail_price = item['retail'] if item['retail'] is not None else 0
    
    if audit_price > retail_price:
        return audit_price
    return retail_price

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel
def load_data():
    wb = openpyxl.load_workbook(EXCEL_FILE)
    sheet = wb.active
    data = []
    for row in sheet.iter_rows(min_row=2, values_only=True):
        name, qty, reserve, retail, audit = row
        available = qty - (reserve if reserve else 0)
        if available > 0:
            cleaned_name = clean_name(name)
            data.append({
                "name": cleaned_name,
                "available": available,
                "retail": retail,
                "audit": audit
            })
    return data

@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞:", reply_markup=main_kb)

@dp.message(lambda message: message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_handler(message: types.Message):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_kb)

@dp.message(lambda message: message.text == "–ü–æ–∏—Å–∫ –ø–æ —Ä–∞–∑–º–µ—Ä—É")
async def size_search(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä:", reply_markup=size_kb)

@dp.message(lambda message: message.text in sizes)
async def show_by_size(message: types.Message):
    data = load_data()
    size = message.text.upper()
    matches = [item for item in data if size in item["name"]]
    
    if not matches:
        await message.answer(f"–®–∏–Ω—ã —Ä–∞–∑–º–µ—Ä–∞ {size} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –Ω–∞–ª–∏—á–∏–∏.", reply_markup=size_kb)
        return
    
    result_message = f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ —Ä–∞–∑–º–µ—Ä—É {size}:\n\n"
    for item in matches:
        price = get_price(item)
        result_message += f"{item['name']}\n–î–æ—Å—Ç—É–ø–Ω–æ: {item['available']} —à—Ç. | –¶–µ–Ω–∞: {price}‚ÇΩ\n\n"
    
    result_message += f"–í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ: {len(matches)} –ø–æ–∑–∏—Ü–∏–π"
    await message.answer(result_message, reply_markup=size_kb)

@dp.message(lambda message: message.text == "–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é")
async def name_search(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è —à–∏–Ω—ã:", reply_markup=ReplyKeyboardMarkup(
        keyboard=[[back_button]],
        resize_keyboard=True
    ))

@dp.message()
async def handle_text(message: types.Message):
    if message.text.startswith('/'):
        return
    
    query = message.text.strip().lower()
    data = load_data()
    results = [item for item in data if query in item["name"].lower()]
    
    if results:
        result_message = f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}':\n\n"
        for item in results:
            price = get_price(item)
            result_message += f"{item['name']}\n–î–æ—Å—Ç—É–ø–Ω–æ: {item['available']} —à—Ç. | –¶–µ–Ω–∞: {price}‚ÇΩ\n\n"
        
        result_message += f"–í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ: {len(results)} –ø–æ–∑–∏—Ü–∏–π"
        
        await message.answer(result_message, reply_markup=ReplyKeyboardMarkup(
            keyboard=[[back_button]],
            resize_keyboard=True
        ))
    else:
        await message.answer("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=ReplyKeyboardMarkup(
            keyboard=[[back_button]],
            resize_keyboard=True
        ))

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
